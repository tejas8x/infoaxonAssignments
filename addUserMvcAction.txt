package com.liferay.action.hook.portlet;
import com.liferay.action.hook.constants.CustomUsersAdminPortletKeys;
//==
import com.liferay.announcements.kernel.model.AnnouncementsDelivery;
import com.liferay.document.library.kernel.service.DLAppLocalService;
import com.liferay.portal.kernel.model.Address;
import com.liferay.portal.kernel.model.EmailAddress;
import com.liferay.portal.kernel.model.Phone;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.Website;
import com.liferay.portal.kernel.portlet.bridges.mvc.BaseTransactionalMVCActionCommand;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCActionCommand;
import com.liferay.portal.kernel.repository.model.FileEntry;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.ServiceContextFactory;
import com.liferay.portal.kernel.service.UserLocalService;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.service.UserService;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.util.FileUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.WebKeys;
import com.liferay.users.admin.kernel.util.UsersAdmin;
import com.practice.common.service.service.UserExtLocalServiceUtil;

import java.util.ArrayList;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

/**
 * @author Tejas Digambar Ghag
 */
@Component(
        property = {
            "javax.portlet.name=" + CustomUsersAdminPortletKeys.MY_ACCOUNT,
            "javax.portlet.name=" + CustomUsersAdminPortletKeys.MY_ORGANIZATIONS,
            "javax.portlet.name=" + CustomUsersAdminPortletKeys.SERVICE_ACCOUNTS,
            "javax.portlet.name=" + CustomUsersAdminPortletKeys.USERS_ADMIN,
            "mvc.command.name=/users_admin/edit_user",
            "service.ranking:Integer=1000"
        },
        service = MVCActionCommand.class
    )


public class CustomEditUserMVCActionCommand extends BaseTransactionalMVCActionCommand {

	@Override
	protected void doTransactionalCommand(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception {
		// TODO Auto-generated method stub
		
        String employeeId=ParamUtil.getString(actionRequest, "employeeId");
        String designation=ParamUtil.getString(actionRequest, "designation");
        String reportee=ParamUtil.getString(actionRequest, "reportee");
        String location=ParamUtil.getString(actionRequest, "location");

        User user = _addUser(actionRequest);
        long userId = user.getUserId();
        String email = user.getEmailAddress();
        System.out.println("User ID === "+userId);
        System.out.println("User mail ID === "+email);
        
    
		
	}
	
	private User _addUser(ActionRequest actionRequest) throws Exception {
        ThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(
            WebKeys.THEME_DISPLAY);

 

        boolean autoScreenName = ParamUtil.getBoolean(
            actionRequest, "autoScreenName");
        String screenName = ParamUtil.getString(actionRequest, "screenName");
        String emailAddress = ParamUtil.getString(
            actionRequest, "emailAddress");
        String languageId = ParamUtil.getString(actionRequest, "languageId");
        String firstName = ParamUtil.getString(actionRequest, "firstName");
        String middleName = ParamUtil.getString(actionRequest, "middleName");
        String lastName = ParamUtil.getString(actionRequest, "lastName");
        long prefixListTypeId = ParamUtil.getInteger(
            actionRequest, "prefixListTypeId");
        long suffixListTypeId = ParamUtil.getInteger(
            actionRequest, "suffixListTypeId");
        boolean male = ParamUtil.getBoolean(actionRequest, "male", true);
        int birthdayMonth = ParamUtil.getInteger(
            actionRequest, "birthdayMonth");
        int birthdayDay = ParamUtil.getInteger(actionRequest, "birthdayDay");
        int birthdayYear = ParamUtil.getInteger(actionRequest, "birthdayYear");
        String comments = ParamUtil.getString(actionRequest, "comments");
        String jobTitle = ParamUtil.getString(actionRequest, "jobTitle");
        long[] organizationIds = _usersAdmin.getOrganizationIds(actionRequest);
        boolean sendEmail = true;

 

        ServiceContext serviceContext = ServiceContextFactory.getInstance(
            User.class.getName(), actionRequest);

 

        User user = _userService.addUser(
            themeDisplay.getCompanyId(), true, null, null, autoScreenName,
            screenName, emailAddress, LocaleUtil.fromLanguageId(languageId),
            firstName, middleName, lastName, prefixListTypeId, suffixListTypeId,
            male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, null,
            organizationIds, null, null, new ArrayList<Address>(),
            new ArrayList<EmailAddress>(), new ArrayList<Phone>(),
            new ArrayList<Website>(), new ArrayList<AnnouncementsDelivery>(),
            sendEmail, serviceContext);

 

        byte[] portraitBytes = null;

 

        long fileEntryId = ParamUtil.getLong(actionRequest, "fileEntryId");

 

        if (fileEntryId > 0) {
            FileEntry fileEntry = _dlAppLocalService.getFileEntry(fileEntryId);

 

            portraitBytes = FileUtil.getBytes(fileEntry.getContentStream());
        }

 

        if (portraitBytes != null) {
            user = userLocalService.updatePortrait(
                user.getUserId(), portraitBytes);
        }

 

        user.setComments(comments);

 

        return userLocalService.updateUser(user);
    }


    @Reference
    private UsersAdmin _usersAdmin;

 

    @Reference
    private UserService _userService;

    @Reference
    private DLAppLocalService _dlAppLocalService;

    @Reference
    private UserLocalService _userLocalService;

    @Reference
    protected UserLocalService userLocalService;


	
	
}